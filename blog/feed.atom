<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Daniel 'MaTachi' Jonsson</title>
  <id>http://matachi.se/blog/feed.atom</id>
  <updated>2013-11-28T00:00:00Z</updated>
  <link href="http://matachi.se" />
  <link href="http://matachi.se/blog/feed.atom" rel="self" />
  <generator>Werkzeug</generator>
  <entry xml:base="http://matachi.se/blog/feed.atom">
    <title type="text">Solutions to the wargame XSS Challenges at xss-quiz.int21h.jp</title>
    <id>http://matachi.se/blog/2013/11/28/solutions-to-the-wargame-xss-challenges-at-xss-quiz-int21h-jp</id>
    <updated>2013-11-28T00:00:00Z</updated>
    <published>2013-11-28T00:00:00Z</published>
    <link href="http://matachi.se/blog/2013/11/28/solutions-to-the-wargame-xss-challenges-at-xss-quiz-int21h-jp" />
    <author>
      <name>Daniel 'MaTachi' Jonsson</name>
    </author>
    <content type="html">&lt;p&gt;In this blog post I will describe how to solve (most of) the stages in the XSS
(cross-site scripting) wargame XSS Challenges at &lt;a href=&quot;http://xss-quiz.int21h.jp/&quot;&gt;http://xss-quiz.int21h.jp/&lt;/a&gt;.
The only tool I will use is the trusty Firefox.&lt;/p&gt;
&lt;h2&gt;Stage #1&lt;/h2&gt;
&lt;p&gt;The server will in its response output the search term into the HTML page.
Simply post&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and we will finish stage #1.&lt;/p&gt;
&lt;h2&gt;Stage #2&lt;/h2&gt;
&lt;p&gt;This time the server won't put the search term directly into the page. Instead
it will be inserted into the input's value attribute. Therefore we will need to
post&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&amp;quot;&amp;gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to first close the input element.&lt;/p&gt;
&lt;h2&gt;Stage #3&lt;/h2&gt;
&lt;p&gt;The server is now properly escaping tags (&lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;/code&gt;) from the text field.
Therefore posting&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;won't do. Even though the select widget has a fixed set of options (Japan,
Germany, USA and United Kingdom), there isn't really anything preventing us
from selecting and posting whatever value we want. Right-click the select
widget and choose &lt;em&gt;Inspect Element&lt;/em&gt; from the context menu. Then in Firefox's
Inspector tool, double-click the text for one of the options and change it to
JavaScript code above. Put something in the text field and submit the form and
finish the stage.&lt;/p&gt;
&lt;h2&gt;Stage #4&lt;/h2&gt;
&lt;p&gt;Right-click in the form and select &lt;em&gt;Inspect Element&lt;/em&gt; from the context menu to
show Firefox's Inspector tool. Find the hidden input field with the name &lt;code&gt;p3&lt;/code&gt;.
The default value for this field is &lt;code&gt;hackme&lt;/code&gt;. In the response from submitting
the form to the server this field's submitted value will be kept. What we want
to do is to submit&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&amp;quot;&amp;gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to the server, since that will break out from the input field and insert the
script into the page.  However, trying to insert that into the input field's
value attribute with Firefox's Inspector tool won't work, because of the &lt;code&gt;&quot;&lt;/code&gt;
character at the beginning. Instead, insert&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;#34&amp;gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;into the attribute's value field (with the &lt;code&gt;&quot;&lt;/code&gt; character escaped to &lt;code&gt;&amp;amp;#34&lt;/code&gt;).
Escaping ASCII characters can easily be done through this character encoding
calculator: &lt;a href=&quot;http://ha.ckers.org/xsscalc.html&quot;&gt;http://ha.ckers.org/xsscalc.html&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Stage #5&lt;/h2&gt;
&lt;p&gt;The input field's max length limit is just an artificial limit set in the HTML
and nothing that is enforced on the server-side. Simply increase &lt;code&gt;maxlength&lt;/code&gt; to
something larger than 15 using Firefox's DOM Inspector tool and submit&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&amp;quot;&amp;gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Stage #6&lt;/h2&gt;
&lt;p&gt;On this stage the tags &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;/code&gt; are properly escaped on the server to &lt;code&gt;&amp;amp;gt;&lt;/code&gt;
and &lt;code&gt;&amp;amp;lt;&lt;/code&gt;. But the rest of the characters aren't. By submitting&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;123&amp;quot; onmouseover=&amp;quot;alert(document.domain);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;the input's value attribute will in the response be filled with &lt;code&gt;123&lt;/code&gt;. But the
element will also have an additional attribute that will show the alert window
when hovering the mouse cursor over the field.&lt;/p&gt;
&lt;h2&gt;Stage #7&lt;/h2&gt;
&lt;p&gt;The server is now also escaping quotation marks, like &lt;code&gt;&quot;&lt;/code&gt; and &lt;code&gt;'&lt;/code&gt;. However,
they missed to put quotes characters around the input's &lt;code&gt;value&lt;/code&gt; attribute's
value, meaning that we still easily can add an additional attribute to the
element. By posting&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;a onmouseover=alert(document.domain);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;, &lt;code&gt;a&lt;/code&gt; will be the field's value and the additional element attribute will be
&lt;code&gt;onmouseover&lt;/code&gt;. This works because it's not a requirement to put quotes around
an attribute value in HTML.&lt;/p&gt;
&lt;h2&gt;Stage #8&lt;/h2&gt;
&lt;p&gt;On this stage we need to take advantage of a technique that was used in the
old, dark days of HTML to make clickable links that executed JavaScript and
didn't leave the page. The solution to this stage is to submit the link&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;javascript:alert(document.domain);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Christian Heilmann is ranting on these &lt;code&gt;javascript:&lt;/code&gt; links, among other things,
in his blog post &lt;a href=&quot;http://christianheilmann.com/2013/10/31/perpetuating-terrible-javascript-practices/&quot;&gt;Perpetuating terrible javaScript
practices&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Stage #9&lt;/h2&gt;
&lt;p&gt;Solving this stage won't work in any modern browser since it's dependent on
support for UTF-7. The XSS attack is described on &lt;a href=&quot;https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet#UTF-7_encoding&amp;gt;&quot;&gt;OWASP's wiki
site&lt;/a&gt;.
Support for &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=414064&quot;&gt;UTF-7 was completely removed from
Firefox&lt;/a&gt; several years ago
(per HTML5 spec).&lt;/p&gt;
&lt;p&gt;To cheat/skip this stage, open Firefox's Web Console and execute
&lt;code&gt;alert(document.domain);&lt;/code&gt;. This will show the alert which will trigger the
congratulations message.&lt;/p&gt;
&lt;h2&gt;Stage #10&lt;/h2&gt;
&lt;p&gt;Try to submit &lt;code&gt;adomainbdomain123&lt;/code&gt; and you will see that &lt;code&gt;ab123&lt;/code&gt; is returned.
It's obvious that the server is removing any instance of the word &lt;code&gt;domain&lt;/code&gt; from
the search query. A logical solution is to obfuscate the JavaScript expression.&lt;/p&gt;
&lt;p&gt;Start with converting &lt;code&gt;alert(document.domain);&lt;/code&gt; to Base64 with the &lt;a href=&quot;http://ha.ckers.org/xsscalc.html&quot;&gt;Character
Encoding Calculator&lt;/a&gt; we previously used. Via
the Stack Overflow question &lt;a href=&quot;http://stackoverflow.com/q/2820249/595990&quot;&gt;Base64 encoding and decoding in client-side
Javascript&lt;/a&gt; we find that all modern
browsers have a global function galled &lt;code&gt;atob()&lt;/code&gt; to decode Base64 strings, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Base64_encoding_and_decoding&quot;&gt;read
more on Mozilla Developer
Network&lt;/a&gt;.
To execute a string as JavaScript, use
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval&quot;&gt;eval()&lt;/a&gt;.
The result that we will submit is:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&amp;quot;&amp;gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;atob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;YWxlcnQoZG9jdW1lbnQuZG9tYWluKQ==&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Stage #11&lt;/h2&gt;
&lt;p&gt;Since the words &lt;code&gt;script&lt;/code&gt;, &lt;code&gt;style&lt;/code&gt; and &lt;code&gt;on&lt;/code&gt; aren't allowed, we have to think
about something else this time. Apparently it's possible to encode JavaScript
as Base64 and make it execute as an iframe src. From the Stack Overflow
question &lt;a href=&quot;http://stackoverflow.com/a/3462800/595990&quot;&gt;Is it possible to &quot;fake&quot; the src attribute of an
iframe?&lt;/a&gt; we can read that it's
possible to do:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;data:text/html;base64, .... base64 encoded HTML data ....&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Read more about &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/data_URIs&quot;&gt;data URIs on Mozilla Developer
Network&lt;/a&gt;. The HTML data we
want to use is:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;parent.&lt;/code&gt; is needed because we want the alert to execute in the context of the
parent's window. Encoding it as Base64 with the &lt;a href=&quot;http://ha.ckers.org/xsscalc.html&quot;&gt;Character Encoding
Calculator&lt;/a&gt; results in:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;PHNjcmlwdD5wYXJlbnQuYWxlcnQoZG9jdW1lbnQuZG9tYWluKTs8L3NjcmlwdD4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code that we will then put into the search box to finish the level is:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&amp;quot;&amp;gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;data:text/html;base64,PHNjcmlwdD5wYXJlbnQuYWxlcnQoZG9jdW1lbnQuZG9tYWluKTs8L3NjcmlwdD4=&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Stage #12&lt;/h2&gt;
&lt;p&gt;This is yet another level that doesn't seem to work, at least not in a modern
version of Firefox. According to &lt;a href=&quot;http://sla.ckers.org/forum/read.php?2,24209&quot;&gt;this
thread&lt;/a&gt; a working solution should
be:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;``/onfocus=alert(document.domain)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;`&lt;/code&gt; should work as a substitute for &lt;code&gt;&quot;&lt;/code&gt; and &lt;code&gt;/&lt;/code&gt; should work as a delimiter.
This &lt;a href=&quot;http://blog.knownsec.com/Knownsec_RD_Checklist/xss/xss_quiz.txt&quot;&gt;xss_quiz.txt
document&lt;/a&gt;
suggests that this is a working soultion:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;``onmouseover=alert(document.domain);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, neither work for me, so I can only assume that this XSS attack doesn't
work any longer. At the first stage of the game it's even written that some
stages only works in IE, and perhaps this is one of them.&lt;/p&gt;
&lt;p&gt;To skip the stage, execute &lt;code&gt;alert(document.domain);&lt;/code&gt; in Firefox's console.&lt;/p&gt;
&lt;h2&gt;Stage #13&lt;/h2&gt;
&lt;p&gt;Neither this stage seems to work. On
&lt;a href=&quot;https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet#DIV&quot;&gt;OWASP&lt;/a&gt;
there are some suggestions to put into a style attribute, however they won't
work for me. The
&lt;a href=&quot;http://blog.knownsec.com/Knownsec_RD_Checklist/xss/xss_quiz.txt&quot;&gt;xss_quiz.text&lt;/a&gt;
file suggests that the following should work:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;background-color:#f00;background:url(&amp;quot;javascript:alert(document.domain);&amp;quot;);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I assume this is also something thas has been fixed.&lt;/p&gt;
&lt;h2&gt;Stage #14&lt;/h2&gt;
&lt;p&gt;The point on this stage is also to inject JavaScript through a style attribute,
so I assume this neither will work, as the previous stage.&lt;/p&gt;
&lt;h2&gt;Stage #15 &amp;amp; Stage #16&lt;/h2&gt;
&lt;p&gt;Unsure if these two work. We are supposed to inject JavaScript through
&lt;code&gt;document.write()&lt;/code&gt;, but I can't find anything that works.&lt;/p&gt;
&lt;h2&gt;Stage #19&lt;/h2&gt;
&lt;p&gt;This stage's vulnerability is the same one that Twitter once had, read more in
the blog post &lt;a href=&quot;http://blog.mindedsecurity.com/2010/09/twitter-domxss-wrong-fix-and-something.html&quot;&gt;A Twitter DomXss, a wrong fix and something
more&lt;/a&gt;.
However, appending&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;#!javascript:alert(document.domain);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to the URL doesn't work for me. I'm only redirected to&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nl&quot;&gt;http:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//xss-quiz.int21h.jp/javascriptalert(document.domain);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For further reading, OWASP has a really good article on &lt;a href=&quot;https://www.owasp.org/index.php/DOM_Based_XSS&quot;&gt;DOM Based
XSS&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The first ~11 stages were really fun as problem solving challenges. The latter
ones were a little wonky, I guess it's because this wargame has some years on
its neck.&lt;/p&gt;
&lt;p&gt;If you have any tips, suggestion on better or alternative, interesting XSS code,
or solutions to the stages I didn't manage to solve, please leave a comment
below.&lt;/p&gt;</content>
  </entry>
  <entry xml:base="http://matachi.se/blog/feed.atom">
    <title type="text">POST to a WordPress JSON REST API from Python</title>
    <id>http://matachi.se/blog/2013/10/05/post-to-a-wordpress-json-rest-api-from-python</id>
    <updated>2013-10-05T00:00:00Z</updated>
    <published>2013-10-05T00:00:00Z</published>
    <link href="http://matachi.se/blog/2013/10/05/post-to-a-wordpress-json-rest-api-from-python" />
    <author>
      <name>Daniel 'MaTachi' Jonsson</name>
    </author>
    <content type="html">&lt;p&gt;In this post I'm gonna show how you can create pages on a WordPress blog from a
Python script.&lt;/p&gt;
&lt;p&gt;For this to work, you first have to install the plugin &lt;a href=&quot;http://wordpress.org/plugins/json-rest-api/&quot;&gt;JSON REST
API&lt;/a&gt; on your WordPress blog. We
will also use the Python library
&lt;a href=&quot;http://docs.python-requests.org/en/latest/index.html&quot;&gt;Requests&lt;/a&gt; to simplify
making HTTP requests. The &lt;a href=&quot;http://docs.python-requests.org/en/latest/user/quickstart/&quot;&gt;quickstart for
Requests&lt;/a&gt; contains
a lot of useful information to get started.&lt;/p&gt;
&lt;p&gt;What we want to do is to make a &lt;a href=&quot;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods&quot;&gt;HTTP POST
request&lt;/a&gt;
to the REST API.&lt;/p&gt;
&lt;p&gt;With curl installed (&lt;code&gt;sudo apt-get install curl&lt;/code&gt;) we can make a HTTP POST against the API in the following way:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;curl -v -H &lt;span class=&quot;s2&quot;&gt;&amp;quot;Accept: application/json&amp;quot;&lt;/span&gt; -H &lt;span class=&quot;s2&quot;&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; -X POST -d &lt;span class=&quot;s1&quot;&gt;&amp;#39;{&amp;quot;title&amp;quot;:&amp;quot;Title&amp;quot;,&amp;quot;content&amp;quot;:&amp;quot;Content&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;page&amp;quot;}&amp;#39;&lt;/span&gt; http://localhost/wp-json.php/posts -u admin:password
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This where I found the &lt;a href=&quot;http://stackoverflow.com/a/5658904/595990&quot;&gt;curl command
above&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Using curl with the verbose
argument (&lt;code&gt;-v&lt;/code&gt;) is a good way to perform HTTP debugging, for example to see how
a REST API behaves.&lt;/p&gt;
&lt;p&gt;The last argument in the curl command above is &lt;code&gt;-u admin:password&lt;/code&gt;.  This
basically adds a header called &lt;code&gt;Authorization&lt;/code&gt; to the request, encodes the
string &lt;code&gt;admin:password&lt;/code&gt; with &lt;a href=&quot;https://en.wikipedia.org/wiki/Base64&quot;&gt;Base64&lt;/a&gt;,
and finally adds &lt;code&gt;Basic&lt;/code&gt; along with the encoded string to the header field. The
result is the header &lt;code&gt;Authorization: Basic YWRtaW46cGFzc3dvcmQ=&lt;/code&gt;. This method
of authentication is called &lt;a href=&quot;http://en.wikipedia.org/wiki/Basic_access_authentication&quot;&gt;Basic access
authentication&lt;/a&gt;, and
must in this case be added to be able to create a new WordPress page/post.&lt;/p&gt;
&lt;p&gt;WordPress JSON REST API's complete schema can be read on their &lt;a href=&quot;https://github.com/rmccue/WP-API/blob/master/docs/schema.md&quot;&gt;Github
page&lt;/a&gt;, for
additional properties when creating a post etc.&lt;/p&gt;
&lt;p&gt;Doing this from Python can be done in the following way:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;base64&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b64encode&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_wordpress_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;http://localhost/wp-json.php/posts&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b64encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;{}:{}&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;page&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;#39;content_raw&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;publish&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;draft&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;#39;Accept&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;#39;Authorization&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Basic {}&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;link&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;create_wordpress_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Title&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Content&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we have used the two functions &lt;code&gt;dumps&lt;/code&gt; and &lt;code&gt;loads&lt;/code&gt; from the &lt;a href=&quot;http://docs.python.org/3.3/library/json.html&quot;&gt;JSON
module&lt;/a&gt;. &lt;code&gt;dumps&lt;/code&gt; is used to
encode Python data types to JSON, while &lt;code&gt;loads&lt;/code&gt; is used to decode JSON.&lt;/p&gt;</content>
  </entry>
  <entry xml:base="http://matachi.se/blog/feed.atom">
    <title type="text">Making a simple subreddit submissions tweeter in Python</title>
    <id>http://matachi.se/blog/2013/09/16/making-a-simple-subreddit-submissions-tweeter-in-python</id>
    <updated>2013-09-16T00:00:00Z</updated>
    <published>2013-09-16T00:00:00Z</published>
    <link href="http://matachi.se/blog/2013/09/16/making-a-simple-subreddit-submissions-tweeter-in-python" />
    <author>
      <name>Daniel 'MaTachi' Jonsson</name>
    </author>
    <content type="html">&lt;p&gt;In this short post we are going write a simple script in Python that reads
submissions from a subreddit and posts links to them on Twitter.&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;First, create a &lt;code&gt;virtualenv&lt;/code&gt; and activate it with:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;virtualenv -p /usr/bin/python2 env
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;env/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then install the necessary dependencies &lt;code&gt;tweepy&lt;/code&gt; and &lt;code&gt;requests&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip install tweepy requests
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Method for retrieving subreddit submissions&lt;/h2&gt;
&lt;p&gt;Using the library
&lt;a href=&quot;http://docs.python-requests.org/en/latest/index.html&quot;&gt;requests&lt;/a&gt; we will fetch
new submissions from a subreddit:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_reddit_posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subreddit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number_of_posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reddit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;http://www.reddit.com/r/{}/new/.json?limit={}&amp;#39;&lt;/span&gt;
                              &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subreddit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number_of_posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                          &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;User-Agent&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Reddit Tweeter&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;submissions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reddit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;children&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;submissions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;http://redd.it/{}&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
                   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;submissions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;submissions&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The method returns a list of dictionaries containing the submissions' IDs,
titles and URLs.&lt;/p&gt;
&lt;h2&gt;Get a Twitter access token and consumer key&lt;/h2&gt;
&lt;p&gt;Visit &lt;a href=&quot;https://dev.twitter.com/apps&quot;&gt;Twitter's dev page&lt;/a&gt; and create a new app.
When you have created an app, visit its settings page and change &lt;code&gt;Access&lt;/code&gt; to
&lt;code&gt;Read and Write&lt;/code&gt;. Then go back to the &lt;code&gt;Details&lt;/code&gt; view and create an access
token.&lt;/p&gt;
&lt;p&gt;When that's done, go back to Python and create the following global variables
with your data:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;ACCESS_TOKEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ACCESS_TOKEN_SECRET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CONSUMER_KEY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CONSUMER_SECRET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Method for posting submissions to Twitter&lt;/h2&gt;
&lt;p&gt;Define the following global variables:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;TAGS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;#Python #Programming&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SUBREDDIT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;python&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NUMBER_OF_POSTS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Of course are you free to change these values to anything you want.&lt;/p&gt;
&lt;p&gt;Then write the following method:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tweepy&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tweet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;submissions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tweepy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OAuthHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CONSUMER_KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CONSUMER_SECRET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_access_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ACCESS_TOKEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACCESS_TOKEN_SECRET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tweepy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;submissions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Add the url and the tags to the tweet&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tweet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u&amp;#39;{} {}&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TAGS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;title_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;139&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tweet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;# The whole title fits in the tweet&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;# If the title doesn&amp;#39;t fit, make it end with `...`&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u&amp;#39;{}...&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;139&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tweet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tweet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u&amp;#39;{} {}&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tweet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;u&amp;#39;[bot] posting: {}&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tweet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Try to post the tweet&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tweet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tweepy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TweepError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;187&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;[bot] Tweet is a duplicate&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;This method takes the list of submissions as an argument.&lt;/li&gt;
&lt;li&gt;Then it sets up access to Twitter's API.&lt;/li&gt;
&lt;li&gt;For each submission it will post a tweet.&lt;ul&gt;
&lt;li&gt;First we set &lt;code&gt;tweet&lt;/code&gt; to Reddit's short URL and the previously specified
  tags.&lt;/li&gt;
&lt;li&gt;If the length of the title is shorter than the URL and the tags we can
  just prepend it to the tweet. Otherwise we cuts the title off and ends it
with &lt;code&gt;...&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When the tweet is ready, post it to Twitter with
  &lt;code&gt;api.update_status(tweet)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Main method&lt;/h2&gt;
&lt;p&gt;Lastly we will write the main method that binds the previously two methods
together:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;submissions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_reddit_posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SUBREDDIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NUMBER_OF_POSTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tweet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;submissions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Complete script&lt;/h2&gt;
&lt;script src=&quot;https://gist.github.com/MaTachi/6584762.js&quot;&gt;&lt;/script&gt;

&lt;h2&gt;Room for further improvements&lt;/h2&gt;
&lt;p&gt;This is just a very first version of something that could become a nice bot.
For example could the submission IDs be stored in a file or a SQLite database
to keep track of which submission that have already been tweeted. The global
variables could be moved to a separate .ini config file. We could use a proper
logger. And we could also set up a cronjob to automatically post new tweets
regularly.&lt;/p&gt;
&lt;h2&gt;Inspiration&lt;/h2&gt;
&lt;p&gt;I wrote this post because of the inspiration I got from this &lt;a href=&quot;http://www.reddit.com/r/Python/comments/1mdlq1/making_a_reddit_twitter_bot/&quot;&gt;Reddit
discussion&lt;/a&gt;
about another Reddit + Twitter bot.&lt;/p&gt;</content>
  </entry>
  <entry xml:base="http://matachi.se/blog/feed.atom">
    <title type="text">Init post</title>
    <id>http://matachi.se/blog/2013/09/13/init-post</id>
    <updated>2013-09-13T00:00:00Z</updated>
    <published>2013-09-13T00:00:00Z</published>
    <link href="http://matachi.se/blog/2013/09/13/init-post" />
    <author>
      <name>Daniel 'MaTachi' Jonsson</name>
    </author>
    <content type="html">&lt;p&gt;Welcome to my new, &lt;em&gt;fresh&lt;/em&gt; web site!&lt;/p&gt;</content>
  </entry>
</feed>
